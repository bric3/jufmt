plugins {
    id("application")
    id("org.graalvm.buildtools.native") version "0.9.15"
    id("org.asciidoctor.jvm.convert") version "3.3.2"
    id("com.github.johnrengelman.shadow") version "7.1.2"
//    id("io.micronaut.application") version "1.5.4"
    id("de.undercouch.download") version "5.3.0"
}

group = "io.github.bric3.jufmt"

apply from: "gradle/asciidoc.gradle"
repositories {
    mavenCentral()
}

graalvmNative {
    metadataRepository {
        enabled = true
    }
    binaries {
        main {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(17)
                vendor = JvmVendorSpec.matching("GraalVM Community")
            }
            buildArgs.addAll(
                    // "--no-fallback",
                    "--native-image-info",
                    "--verbose",
                    "-H:IncludeResources=java/lang/uniName.dat\$" /* https://github.com/oracle/graal/issues/3133 */,
                    "-H:IncludeResources=banana/fonts/.*.[tf]lf\$",
                    // https://medium.com/graalvm/making-sense-of-native-image-contents-741a688dab4d
                    // https://www.graalvm.org/docs/tools/dashboard/?ojr=dashboard
                    "-H:DashboardDump=jufmt-native-image-dashboard",
                    "-H:+DashboardAll"
            )
        }
    }
}

dependencies {
    compileOnly("org.graalvm.nativeimage:svm:22.2.0.1")

    annotationProcessor("info.picocli:picocli-codegen:4.6.3")
    implementation("info.picocli:picocli:4.6.3")

    testImplementation("org.assertj:assertj-core:3.23.1")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.1")
}


application {
    mainClass.set("jufmt.JufmtCommand")
}

//jar.enabled(false)
distTar.enabled(false)
distZip.enabled(false)
shadowDistTar.enabled(false)
shadowDistZip.enabled(false)

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

task downloadFigletFonts(type: Download) {
    src('https://github.com/xero/figlet-fonts/archive/master.zip')
    dest("$buildDir/xero-figlet-fonts-master.zip")
}

task downloadAndUnzipFigletFonts(dependsOn: downloadFigletFonts, type: Copy) {
    from(zipTree(downloadFigletFonts.dest)) {
        include('**/*.tlf', '**/*.flf')
        includeEmptyDirs(false)
        eachFile { FileCopyDetails fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
        }
    }
    into("${sourceSets.main.output.resourcesDir}/banana/fonts")
}
compileJava.finalizedBy(downloadAndUnzipFigletFonts)

tasks {


}


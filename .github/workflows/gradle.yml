name: Java CI with Gradle

on:
  workflow_dispatch:

  push:
    branches: [ master ]
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

  pull_request:
    branches: [ master ]

jobs:
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v3

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1
        with:
          min-wrapper-count: 0
        
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        # Gradle currently does not detect the Oracle GraalVM installation ('graalvm')
        distribution: 'graalvm-community'
        java-version: '20'
        components: 'native-image'
        native-image-job-reports: 'true'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Show toolchains
      uses: gradle/gradle-build-action@v2
      with:
          arguments: -q javaToolchains

    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        arguments: build

    - name: Build native image
      uses: gradle/gradle-build-action@v2
      with:
        arguments: nativeCompile

    - name: Produce doc
      uses: gradle/gradle-build-action@v2
      with:
        arguments: asciidoctor


    - name: Rename linux binary
      if: contains(matrix.os, 'ubuntu')
      run: mv ./whichlicense ./whichlicense-linux-amd64
      working-directory: ./jufmt-cli/build/native/nativeCompile
    - name: Rename Windows binary
      if: contains(matrix.os, 'windows')
      run: mv ./whichlicense.exe ./whichlicense-windows-amd64.exe
      working-directory: ./jufmt-cli/build/native/nativeCompile
    - name: Rename macOS binary
      if: contains(matrix.os, 'macos')
      run: mv ./whichlicense ./whichlicense-darwin-amd64
      working-directory: ./jufmt-cli/build/native/nativeCompile

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: jufmt-${{ github.sha }}
        path: ./jufmt-cli/build/native/nativeCompile/jufmt*
        if-no-files-found: error
        retention-days: 1

  release:
    needs: [ build ]
    runs-on: ubuntu-22.04
    environment: release
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download binary artifacts
        uses: actions/download-artifact@v3
        with:
          name: jufmt-${{ github.sha }}
      - name: Release binary artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            jufmt-linux-amd64
            jufmt-windows-amd64.exe
            jufmt-darwin-amd64